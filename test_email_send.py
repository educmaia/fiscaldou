#!/usr/bin/env python3
"""
Teste espec√≠fico para envio de email teste
"""

import requests
import json

def test_email_send():
    """Testa envio de email teste"""

    BASE_URL = "http://localhost:5000"

    print("=== Teste: Envio de Email Teste ===")

    try:
        # Primeiro, cadastra um email se n√£o existir
        form_data = {
            'email': 'educmaia@gmail.com',
            'action': 'register'
        }

        print("1. Cadastrando email...")
        response = requests.post(BASE_URL, data=form_data, timeout=15)
        if response.status_code == 200:
            print("   Email cadastrado/confirmado")

        # Depois, adiciona um termo se n√£o existir
        form_data = {
            'email': 'educmaia@gmail.com',
            'term': '23001.000069/2025-95',
            'action': 'add_term'
        }

        print("2. Adicionando termo de teste...")
        response = requests.post(BASE_URL, data=form_data, timeout=15)
        if response.status_code == 200:
            print("   Termo adicionado/confirmado")

        # Agora testa o envio de email
        form_data = {
            'email': 'educmaia@gmail.com',
            'action': 'send_now'
        }

        print("3. Testando envio de email...")
        response = requests.post(BASE_URL, data=form_data, timeout=30)

        if response.status_code == 200:
            response_text = response.text

            # Verifica se o erro "n√£o possui termos" aparece
            if "n√£o possui termos cadastrados" in response_text:
                print("   ‚ùå ERRO: Email ainda n√£o possui termos cadastrados")
                return False

            # Verifica indicadores de sucesso
            success_indicators = [
                "Email de teste enviado",
                "enviado com sucesso",
                "ocorr√™ncia",
                "artigos encontrados"
            ]

            found_indicators = []
            for indicator in success_indicators:
                if indicator in response_text:
                    found_indicators.append(indicator)

            if found_indicators:
                print(f"   ‚úÖ SUCESSO: Email enviado! Indicadores: {found_indicators}")

                # Extrai mensagem de resultado se poss√≠vel
                import re
                # Procura por mensagens de sucesso
                patterns = [
                    r'Email de teste enviado[^<]*',
                    r'enviado com sucesso[^<]*',
                    r'\d+ ocorr√™ncia[^<]*'
                ]

                for pattern in patterns:
                    match = re.search(pattern, response_text)
                    if match:
                        print(f"   Resultado: {match.group()}")
                        break

                return True
            else:
                print("   ‚ö†Ô∏è INCERTO: N√£o encontrou indicadores claros de sucesso")

                # Verifica se h√° indicadores de erro
                error_indicators = [
                    "Falha no envio",
                    "Erro ao enviar",
                    "Verifique as credenciais SMTP"
                ]

                found_errors = []
                for error in error_indicators:
                    if error in response_text:
                        found_errors.append(error)

                if found_errors:
                    print(f"   ‚ùå ERROS ENCONTRADOS: {found_errors}")
                else:
                    print("   Primeiros 300 caracteres da resposta:")
                    print("   " + response_text[:300].replace('\n', ' ') + "...")

                return False
        else:
            print(f"   ‚ùå ERRO HTTP: {response.status_code}")
            return False

    except Exception as e:
        print(f"   ‚ùå ERRO: {e}")
        return False

def test_redis_data():
    """Verifica dados no Redis"""

    print("\n=== Verifica√ß√£o Redis ===")

    try:
        from dotenv import load_dotenv
        load_dotenv()

        from redis_client import redis_client

        # Testa conex√£o
        redis_client.client.ping()
        print("‚úÖ Redis conectado")

        # Verifica email
        test_email = "educmaia@gmail.com"
        email_data = redis_client.get(f"email:{test_email}")
        if email_data:
            print(f"‚úÖ Email {test_email} encontrado no Redis")
        else:
            print(f"‚ö†Ô∏è Email {test_email} n√£o encontrado no Redis")

        # Verifica termos
        terms_data = redis_client.get(f"email_terms:{test_email}")
        if terms_data:
            import json
            terms = json.loads(terms_data)
            print(f"‚úÖ Termos para {test_email}: {terms}")
        else:
            print(f"‚ö†Ô∏è Nenhum termo encontrado para {test_email}")

        return True

    except Exception as e:
        print(f"‚ùå Erro Redis: {e}")
        return False

def main():
    """Fun√ß√£o principal"""

    print("üìß TESTE DE ENVIO DE EMAIL")
    print("=" * 50)

    # Verifica Redis primeiro
    redis_ok = test_redis_data()

    # Testa envio de email
    email_ok = test_email_send()

    # Resultado final
    print("\n" + "=" * 50)
    print("üìä RESULTADO FINAL:")
    print(f"Redis funcionando: {'‚úÖ' if redis_ok else '‚ùå'}")
    print(f"Envio de email: {'‚úÖ' if email_ok else '‚ùå'}")

    if redis_ok and email_ok:
        print("\nüéâ TESTE COMPLETO PASSOU!")
        print("‚úÖ Redis est√° funcionando e email foi enviado com sucesso!")
    elif redis_ok and not email_ok:
        print("\n‚ö†Ô∏è REDIS OK, MAS PROBLEMA NO ENVIO")
        print("üîß Verifique as credenciais SMTP ou configura√ß√£o de email")
    elif not redis_ok:
        print("\n‚ùå PROBLEMA NO REDIS")
        print("üîß Verifique se REDIS_URL est√° configurada e o servi√ßo est√° rodando")

    print("\nüí° DICAS:")
    print("- Certifique-se que o servidor est√° rodando em http://localhost:5000")
    print("- Verifique se as credenciais SMTP est√£o corretas no .env")
    print("- Teste manualmente atrav√©s da interface web")

if __name__ == "__main__":
    main()