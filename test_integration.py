#!/usr/bin/env python3
"""
Teste de integra√ß√£o Redis com o index.py
Verifica se os bot√µes cadastrar/remover est√£o funcionando com Redis
"""

import requests
import json
import redis

# Configura√ß√£o
BASE_URL = "http://localhost:5000"  # Ajuste conforme necess√°rio
REDIS_URL = "redis://default:oGJa1ny0G2E4ZLgZT3SQqMF83dYe05io@redis-12998.c15.us-east-1-4.ec2.redns.redis-cloud.com:12998"

def test_redis_connection():
    """Testa conex√£o direta com Redis"""
    print("=== Testando Conex√£o Redis ===")
    try:
        r = redis.Redis.from_url(REDIS_URL, decode_responses=True)
        r.ping()
        print("‚úÖ Redis conectado com sucesso!")
        return r
    except Exception as e:
        print(f"‚ùå Erro na conex√£o Redis: {e}")
        return None

def test_web_interface():
    """Testa a interface web"""
    print("\n=== Testando Interface Web ===")
    try:
        response = requests.get(BASE_URL, timeout=10)
        if response.status_code == 200:
            print("‚úÖ Interface web acess√≠vel")

            # Verifica se menciona Redis na p√°gina
            if "Redis" in response.text:
                print("‚úÖ Interface menciona Redis")
            else:
                print("‚ö†Ô∏è  Interface n√£o menciona Redis explicitamente")

            return True
        else:
            print(f"‚ùå Interface retornou c√≥digo: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erro ao acessar interface: {e}")
        return False

def test_email_registration():
    """Testa cadastro de email via form"""
    print("\n=== Testando Cadastro de Email ===")

    test_email = "teste@redis.com"

    try:
        # Dados do formul√°rio
        form_data = {
            'email': test_email,
            'action': 'register'
        }

        response = requests.post(BASE_URL, data=form_data, timeout=10)

        if response.status_code == 200:
            if "Redis" in response.text and "cadastrado com sucesso" in response.text:
                print(f"‚úÖ Email {test_email} cadastrado via Redis!")
                return True
            elif "cadastrado com sucesso" in response.text:
                print(f"‚úÖ Email {test_email} cadastrado (sem Redis expl√≠cito)")
                return True
            else:
                print(f"‚ö†Ô∏è  Resposta n√£o confirma cadastro: {response.text[:200]}...")
                return False
        else:
            print(f"‚ùå Erro HTTP: {response.status_code}")
            return False

    except Exception as e:
        print(f"‚ùå Erro no cadastro: {e}")
        return False

def test_email_removal():
    """Testa remo√ß√£o de email via form"""
    print("\n=== Testando Remo√ß√£o de Email ===")

    test_email = "teste@redis.com"

    try:
        # Dados do formul√°rio
        form_data = {
            'email': test_email,
            'action': 'unregister'
        }

        response = requests.post(BASE_URL, data=form_data, timeout=10)

        if response.status_code == 200:
            if "Redis" in response.text and "removido com sucesso" in response.text:
                print(f"‚úÖ Email {test_email} removido via Redis!")
                return True
            elif "removido com sucesso" in response.text:
                print(f"‚úÖ Email {test_email} removido (sem Redis expl√≠cito)")
                return True
            else:
                print(f"‚ö†Ô∏è  Resposta n√£o confirma remo√ß√£o: {response.text[:200]}...")
                return False
        else:
            print(f"‚ùå Erro HTTP: {response.status_code}")
            return False

    except Exception as e:
        print(f"‚ùå Erro na remo√ß√£o: {e}")
        return False

def test_search_term_management():
    """Testa adi√ß√£o e remo√ß√£o de termos de busca"""
    print("\n=== Testando Gerenciamento de Termos ===")

    # Primeiro cadastra um email
    test_email = "termo@teste.com"

    # Cadastra email
    form_data = {
        'email': test_email,
        'action': 'register'
    }
    response = requests.post(BASE_URL, data=form_data, timeout=10)

    if "cadastrado com sucesso" not in response.text:
        print(f"‚ùå Falha ao cadastrar email para teste de termos")
        return False

    # Adiciona termo
    print(f"  Adicionando termo para {test_email}...")
    form_data = {
        'email': test_email,
        'term': 'licita√ß√£o teste',
        'action': 'add_term'
    }
    response = requests.post(BASE_URL, data=form_data, timeout=10)

    if "adicionado" in response.text:
        if "Redis" in response.text:
            print("  ‚úÖ Termo adicionado via Redis!")
        else:
            print("  ‚úÖ Termo adicionado")
    else:
        print("  ‚ùå Falha ao adicionar termo")
        return False

    # Remove termo
    print(f"  Removendo termo de {test_email}...")
    form_data = {
        'email': test_email,
        'term': 'licita√ß√£o teste',
        'action': 'remove_term'
    }
    response = requests.post(BASE_URL, data=form_data, timeout=10)

    if "removido" in response.text:
        if "Redis" in response.text:
            print("  ‚úÖ Termo removido via Redis!")
        else:
            print("  ‚úÖ Termo removido")
    else:
        print("  ‚ùå Falha ao remover termo")
        return False

    # Remove email de teste
    form_data = {
        'email': test_email,
        'action': 'unregister'
    }
    requests.post(BASE_URL, data=form_data, timeout=10)

    return True

def check_redis_data():
    """Verifica dados no Redis diretamente"""
    print("\n=== Verificando Dados no Redis ===")

    r = test_redis_connection()
    if not r:
        return False

    try:
        # Lista emails
        emails = r.smembers("emails:active")
        print(f"  Emails ativos no Redis: {len(emails)}")
        for email in list(emails)[:3]:  # Mostra apenas 3
            print(f"    - {email}")

        # Lista algumas chaves
        keys = r.keys("email:*")[:5]  # Primeiras 5 chaves
        print(f"  Chaves de email encontradas: {len(r.keys('email:*'))}")

        # Lista termos
        term_keys = r.keys("email_terms:*")
        print(f"  Chaves de termos encontradas: {len(term_keys)}")

        return True

    except Exception as e:
        print(f"  ‚ùå Erro ao verificar dados: {e}")
        return False

def main():
    """Fun√ß√£o principal de teste"""
    print("üöÄ TESTE DE INTEGRA√á√ÉO REDIS + INDEX.PY")
    print("=" * 50)

    # Lista de testes
    tests = [
        ("Conex√£o Redis", test_redis_connection),
        ("Interface Web", test_web_interface),
        ("Cadastro Email", test_email_registration),
        ("Remo√ß√£o Email", test_email_removal),
        ("Gerenciamento Termos", test_search_term_management),
        ("Dados Redis", check_redis_data)
    ]

    results = []

    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Erro no teste {test_name}: {e}")
            results.append((test_name, False))

    # Relat√≥rio final
    print("\n" + "=" * 50)
    print("üìä RELAT√ìRIO FINAL")
    print("=" * 50)

    passed = 0
    total = len(results)

    for test_name, result in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{test_name:.<25} {status}")
        if result:
            passed += 1

    print("-" * 50)
    print(f"RESULTADO: {passed}/{total} testes passaram")

    if passed == total:
        print("üéâ TODOS OS TESTES PASSARAM!")
        print("‚úÖ Redis est√° integrado e funcionando com os bot√µes!")
    elif passed > total // 2:
        print("‚ö†Ô∏è  MAIORIA DOS TESTES PASSOU")
        print("üîß Redis parcialmente integrado, verifique falhas acima")
    else:
        print("‚ùå MUITOS TESTES FALHARAM")
        print("üö® Verifique a integra√ß√£o Redis")

    print("\nüí° DICAS:")
    print("- Certifique-se que o servidor est√° rodando em http://localhost:5000")
    print("- Verifique se REDIS_URL est√° configurado no .env")
    print("- Teste manualmente os bot√µes na interface web")

if __name__ == "__main__":
    main()